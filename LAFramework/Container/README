Контейнер обєктів (сінглтон)

Ініціалізація контейнер обєктів можна ініціалізувати в любому місці

$container = \LAFramework\Container\Container::init();

Під час ініціалізації контейнера у його властивості запусуються прототипи обєктів - це настройки обєктів, які в подальшому будуть створені.

Після цього ми можемо витягнути з контейнера будь який обєкт фреймворка

$view = $container->get('view')

У зміній $view буде знаходитися обєкт view.

Під час доругого звернення $container->get('view'), обєкт уже створюватися не буде, а буде повернений уже перед тим створений, під час пешого звернення.

Для перестворення обєкту потрібно передати параметр FALSE $container->get('view',FALSE).

Ми можем створювати свої прототипи обєктів, які в подальшому будуть створені. Для цього у файлі config/component.php додаємо:

.......................

'myComponent' => [
    'class' => '\Component\MyComponent',
],

.......................

також ми повинні створити клас у папці Component - MyComponent.php

.......................

namespace Component;

class MyComponent {
	
}
......................

після цього ми можем звернутися

$container->get('myComponent').

Також у настройках можна передавати властивості прототипу обєкту

......................

'myComponent2' => [
    'class' => '\Component\MyComponent2',
    'params' => [
        'view' => [
            'type' => 'object',
            'value' => 'view'
        ],
        'a' => [
            'value' => 4
        ],
        'myComponent' => [
            'type' => 'object',
            'value' => 'myComponent'
        ],

    ]
],

........................

Тут перш за все хочу сказати, що в ядрі існують ряд прототипів обєктів, які вже описані в ядрі, такі як: doctrine, view, request.

Вернемся до нашого прикладу, ми бачкм що появився у myComponent2 блок з параметрами. І бачимо 3 параметри view, a, myComponent.

І бачимо що, якщо в параметра існує 'type' => 'object' - це означає що дана властивість також буде обєктом.

В даному випадку параметр view буде містити в собі обєкт view, а параметр myComponent буде містити обєкт myComponent, який описаний вище.

Параметр а буде містити просте значення 4

$myComponent2 = $container->get('myComponent2')

Під час першого звернення обєкти view і myComponent будуть автоматично створені і передані в обєкт myComponent2.

Давайте напишемо клас MyComponent2 

..........................................
namespace Component;

use LAFramework\View\Viev;
use Component\MyComponent;

class MyComponent2 {

	/**
	* @type Viev
	*/
	public $view;

	/**
	* @type int
	*/
	protected $a;

	/**
	* @type MyComponent
	*/
	private $myComponent;

	public function __construct(View $view, $a, MyComponent $myComponent) {
		$this->view = $view;
		$this->a = $a;
		$this->myComponent = $myComponent;
	}

	
}
........................................

Тут зверніть увагу я спіцяльно в класі зробив параметри різного типу public, protected, private. 

Це зробив для того щоб ви розуміли що можна використовувати любий з них і на створення обєкту це не впливає.

Також важливо щоб назва властивостей в настройках прототипа обєкту відповідала назві в класі і в конструкторі. Порядок також має значення

Після створення обєкту ми можем звернутися з нього до обєкту виду оскільки вид публічна властивість

myComponent2->view->render();

Аналогічно можна звернутися до інших вдастивостей, якщо вони також будуть публічні.
